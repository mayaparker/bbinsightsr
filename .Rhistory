getwd()
load("C:/Users/wilso/Documents/School/SPRING2025/STAT6555/project/function_code/dict.rda")
load("C:/Users/wilso/Documents/School/SPRING2025/STAT6555/project/function_code/ids.rda")
load("C:/Users/wilso/Documents/School/SPRING2025/STAT6555/project/function_code/ncaa_colors.rda")
ls()
View(dict)
View(dict)
library(devtools)
usethis::use_data(dict, ids, ncaa_colors, overwrite = TRUE)
usethis::use_data(dict, ids, ncaa_colors, internal = TRUE, overwrite = TRUE)
usethis::use_data(dict, ids, ncaa_colors, overwrite = TRUE)
document()
document()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
check()
document()
check()
document()
check()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
library(devtools)
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
# Load package and data (if needed)
library(bbinsightsR)
library(dplyr)
# 1. Pull just the Utah State vs Wyoming game from Feb 8, 2022
game <- select_single_game(
data      = usu_data,
team      = "Utah State",
opponent  = "Wyoming",
game_date = "2022-02-08"
)
# 2. Check for unique half values (should include 1, 2, and 3 for overtime)
unique(game$half)
# 3. Count rows by half to verify coverage
table(game$half)
# 4. Run assign_game_breaks() on this game
segmented <- assign_game_breaks(game_data = game, segment_by = "timeout")
# 5. Count rows per segment to check if first half got lumped
table(segmented$segment_id)
# 6. Print segment labels to inspect what's happening
seg_labels <- segmented %>%
filter(game_break) %>%
select(segment_id, game_break_label)
print(seg_labels)
# 7. Optional: inspect time and description structure
head(segmented %>% select(play_id, half, time_remaining_half, secs_remaining_absolute, description), 20)
# Step 1: Select the game
game <- select_single_game(
data      = usu_data,
team      = "Utah State",
opponent  = "Wyoming",
game_date = "2022-02-08"
)
# Confirm halves
print("Unique halves in game:")
print(unique(game$half))
# Step 2: Assign segments by timeout
segmented <- assign_game_breaks(
game_data  = game,
segment_by = "timeout"
)
# Diagnostic 1: Check segment IDs
print("Number of rows per segment:")
print(table(segmented$segment_id))
# Diagnostic 2: View where segment breaks occurred
print("Segment breaks and labels:")
wyo_game <- select_single_game(
data      = usu_data,
team      = "Utah State",
opponent  = "Wyoming",
game_date = "2022-02-08"
)
wyo_segmented_game <- assign_game_breaks(
game_data  = wyo_game,
segment_by = "timeout"
)
View(wyo_segmented_game)
write.csv(wyo_segmented_game, "wyo_segmented_game.csv")
getwd()
View(wyo_game)
plot_game_trends(usu_data, "Utah State", "Wyoming", "timeout", "points")
