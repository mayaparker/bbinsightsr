stop("Invalid segment_by type or missing num_breaks for 'num_breaks'.")
}
return(game_data)
}
document()
load_all()
broken_nevada <-assign_game_breaks(nevada_game, "timeout")
View(broken_nevada)
document()
load_all()
document()
load_all()
broken_nevada <-assign_game_breaks(nevada_game, "timeout")
View(broken_nevada)
document()
load_all()
broken_nevada <-assign_game_breaks(nevada_game, "timeout")
View(broken_nevada)
document()
load_all()
#' @param num_breaks Integer (optional). Required if `segment_by = "num_breaks"`.
#'
#' @return A modified version of `game_data` with columns:
#'   \item{`segment_id`}{An integer indicating segment assignment.}
#'   \item{`game_break`}{Logical TRUE/FALSE indicator for break rows.}
#'   \item{`game_break_label`}{Label showing the break and formatted time (MM:SS).}
#'
#' @importFrom dplyr group_by slice_min ungroup
#' @importFrom hms as_hms
#' @keywords internal
assign_game_breaks <- function(game_data, segment_by = c("half", "timeout", "num_breaks"), num_breaks = NULL) {
segment_by <- match.arg(segment_by)
game_data  <- game_data[order(game_data$play_id), ]
# Ensure time_remaining_half is formatted using hms
game_data$time_remaining_half <- hms::as_hms(game_data$time_remaining_half)
game_data$segment_id        <- NA_integer_
game_data$game_break        <- FALSE
game_data$game_break_label  <- NA_character_
if (segment_by == "timeout") {
is_break <- grepl("\\btimeout\\b|\\bend\\b", tolower(game_data$description)) & !is.na(game_data$play_id)
candidates <- game_data[is_break, ]
home_team <- unique(game_data$home)[1]
away_team <- unique(game_data$away)[1]
candidates$priority <- 4L
eo_game <- grepl("end of game", tolower(candidates$description))
candidates$priority[eo_game] <- 1L
coach_to <- grepl("timeout", tolower(candidates$description)) &
(grepl(home_team, candidates$description, ignore.case = TRUE) |
grepl(away_team, candidates$description, ignore.case = TRUE))
candidates$priority[coach_to] <- pmin(candidates$priority[coach_to], 2L)
eo_half <- grepl("end of [0-9]+(st|nd|th) half", tolower(candidates$description))
candidates$priority[eo_half] <- pmin(candidates$priority[eo_half], 3L)
selected <- dplyr::group_by(candidates, secs_remaining_absolute) %>%
dplyr::slice_min(priority, with_ties = FALSE) %>%
dplyr::ungroup()
break_idxs <- which(game_data$play_id %in% selected$play_id)
seg_id <- integer(nrow(game_data))
cur_seg <- 1L
last_index <- 1L
for (i in break_idxs) {
seg_id[last_index:(i - 1)] <- cur_seg
seg_id[i] <- cur_seg
game_data$game_break[i] <- TRUE
formatted_time <- format(game_data$time_remaining_half[i], "%M:%S")
game_data$game_break_label[i] <- paste0(game_data$description[i], " (", formatted_time, ")")
cur_seg <- cur_seg + 1L
last_index <- i + 1L
}
if (last_index <= nrow(game_data)) {
seg_id[last_index:nrow(game_data)] <- cur_seg
}
game_data$segment_id <- seg_id
} else if (segment_by == "half") {
game_data$segment_id <- game_data$half
for (h in unique(game_data$segment_id)) {
rows <- which(game_data$segment_id == h)
last <- tail(rows, 1)
game_data$game_break[last] <- TRUE
# Format time as mm:ss from hms object
time_secs <- as.numeric(game_data$time_remaining_half[last])
formatted_time <- sprintf("%02d:%02d", time_secs %/% 60, time_secs %% 60)
game_data$game_break_label[last] <- paste0(game_data$description[last], " (", formatted_time, ")")
}
} else if (segment_by == "num_breaks" && !is.null(num_breaks)) {
total_time <- max(game_data$secs_remaining_absolute, na.rm = TRUE)
cuts <- seq(total_time, 0, length.out = num_breaks + 1)
game_data$segment_id <- cut(game_data$secs_remaining_absolute,
breaks = cuts,
include.lowest = TRUE,
labels = FALSE
)
for (s in unique(game_data$segment_id)) {
rows <- which(game_data$segment_id == s)
last <- tail(rows, 1)
game_data$game_break[last] <- TRUE
formatted_time <- sprintf("%02d:%02d",
as.numeric(game_data$time_remaining_half[i]) %/% 60,
as.numeric(game_data$time_remaining_half[i]) %% 60)
game_data$game_break_label[last] <- paste0(game_data$description[last], " (", formatted_time, ")")
}
} else {
stop("Invalid segment_by type or missing num_breaks for 'num_breaks'.")
}
return(game_data)
}
broken_nevada <-assign_game_breaks(nevada_game, "timeout")
View(broken_nevada)
document()
load_all
load_all()
nevada_game <- select_single_game(usu_data, "Utah State", "Nevada")
# 0. Load required libraries
library(dplyr)
library(lubridate)
library(hms)
# 1. Start with a known single game dataset
game <- nevada_game
# 2. Check the class of time_remaining_half
str(game$time_remaining_half)
table(class(game$time_remaining_half))  # Just to confirm its type
# 3. Look at a few example values
head(game$time_remaining_half, 10)
# 4. If it's not an `hms` object, try coercing it
if (!inherits(game$time_remaining_half, "hms")) {
cat("time_remaining_half is not hms — coercing now...\n")
game <- game %>%
mutate(time_remaining_half = as_hms(time_remaining_half))
}
# 5. Test formatting: try converting a few to %M:%S
formatted_times <- format(game$time_remaining_half[1:10], "%M:%S")
print(formatted_times)
# 6. If formatting didn’t work, fall back to custom logic using seconds
# This handles both numeric and difftime objects
coerce_to_mms <- function(x) {
if (inherits(x, "hms")) {
total_secs <- as.numeric(x)
} else if (inherits(x, "difftime")) {
total_secs <- as.numeric(x, units = "secs")
} else {
total_secs <- as.numeric(x)
}
sprintf("%02d:%02d", total_secs %/% 60, total_secs %% 60)
}
# Apply custom formatter to a few values
formatted_custom <- sapply(game$time_remaining_half[1:10], coerce_to_mms)
print(formatted_custom)
# 7. Simulate game_break_label logic
# Pick one play as an example
i <- 5
desc <- game$description[i]
t_raw <- game$time_remaining_half[i]
t_label <- coerce_to_mms(t_raw)
glue::glue("{desc} ({t_label})")
# 8. Optional: create a test segment label column for visualization
game <- game %>%
mutate(
debug_label = paste0(description, " (", sapply(time_remaining_half, coerce_to_mms), ")")
)
head(game$debug_label, 10)
# Load any needed packages
library(dplyr)
# ---- STEP 1: Start with a known game ----
# (Replace this with your actual game object if needed)
game <- nevada_game  # assuming you've already loaded it
# ---- STEP 2: Check the class of the time column ----
cat("Class of time_remaining_half:\n")
print(class(game$time_remaining_half))
cat("\n")
# ---- STEP 3: Preview time values ----
cat("First 10 time_remaining_half values:\n")
print(head(game$time_remaining_half, 10))
cat("\n")
# ---- STEP 4: Define formatter to force mm:ss ----
coerce_to_mmss <- function(x) {
total_secs <- as.numeric(x)
mins <- total_secs %/% 60
secs <- round(total_secs %% 60)
sprintf("%02d:%02d", mins, secs)
}
# ---- STEP 5: Apply the formatter to a few rows ----
cat("Formatted time values using mm:ss:\n")
formatted_sample <- sapply(game$time_remaining_half[1:10], coerce_to_mmss)
print(formatted_sample)
cat("\n")
# ---- STEP 6: Build a debug label column like your plot uses ----
game_debug <- game %>%
mutate(
debug_label = paste0(description, " (", sapply(time_remaining_half, coerce_to_mmss), ")")
)
# ---- STEP 7: Show examples of the final labels ----
cat("Final debug labels with formatted time:\n")
print(head(game_debug$debug_label, 10))
# ---- STEP 4: Define formatter to force mm:ss ----
coerce_to_mmss <- function(x) {
t_str <- as.character(hms::as_hms(x))
substr(t_str, 1, 5)  # Grab "MM:SS" from "MM:SS:00"
}
# ---- STEP 5: Apply the formatter to a few rows ----
cat("Formatted time values using mm:ss:\n")
formatted_sample <- sapply(game$time_remaining_half[1:10], coerce_to_mmss)
print(formatted_sample)
cat("\n")
# ---- STEP 6: Build a debug label column like your plot uses ----
game_debug <- game %>%
mutate(
debug_label = paste0(description, " (", sapply(time_remaining_half, coerce_to_mmss), ")")
)
# ---- STEP 7: Show examples of the final labels ----
cat("Final debug labels with formatted time:\n")
print(head(game_debug$debug_label, 10))
#' @param num_breaks Integer (optional). Required if `segment_by = "num_breaks"`.
#'
#' @return A modified version of `game_data` with columns:
#'   \item{`segment_id`}{An integer indicating segment assignment.}
#'   \item{`game_break`}{Logical TRUE/FALSE indicator for break rows.}
#'   \item{`game_break_label`}{Label showing the break and formatted time (MM:SS).}
#'
#' @importFrom dplyr group_by slice_min ungroup
#' @importFrom hms as_hms
#' @keywords internal
assign_game_breaks <- function(game_data, segment_by = c("half", "timeout", "num_breaks"), num_breaks = NULL) {
segment_by <- match.arg(segment_by)
game_data  <- game_data[order(game_data$play_id), ]
game_data$time_remaining_half <- hms::as_hms(game_data$time_remaining_half)
game_data$segment_id       <- NA_integer_
game_data$game_break       <- FALSE
game_data$game_break_label <- NA_character_
# --- Formatter to strip trailing :00 from hms ---
format_mmss <- function(x) {
t_str <- as.character(hms::as_hms(x))
substr(t_str, 1, 5)
}
if (segment_by == "timeout") {
is_break <- grepl("\\btimeout\\b|\\bend\\b", tolower(game_data$description)) & !is.na(game_data$play_id)
candidates <- game_data[is_break, ]
home_team <- unique(game_data$home)[1]
away_team <- unique(game_data$away)[1]
candidates$priority <- 4L
eo_game <- grepl("end of game", tolower(candidates$description))
candidates$priority[eo_game] <- 1L
coach_to <- grepl("timeout", tolower(candidates$description)) &
(grepl(home_team, candidates$description, ignore.case = TRUE) |
grepl(away_team, candidates$description, ignore.case = TRUE))
candidates$priority[coach_to] <- pmin(candidates$priority[coach_to], 2L)
eo_half <- grepl("end of [0-9]+(st|nd|th) half", tolower(candidates$description))
candidates$priority[eo_half] <- pmin(candidates$priority[eo_half], 3L)
selected <- dplyr::group_by(candidates, secs_remaining_absolute) %>%
dplyr::slice_min(priority, with_ties = FALSE) %>%
dplyr::ungroup()
break_idxs <- which(game_data$play_id %in% selected$play_id)
seg_id <- integer(nrow(game_data))
cur_seg <- 1L
last_index <- 1L
for (i in break_idxs) {
seg_id[last_index:(i - 1)] <- cur_seg
seg_id[i] <- cur_seg
game_data$game_break[i] <- TRUE
game_data$game_break_label[i] <- paste0(game_data$description[i], " (", format_mmss(game_data$time_remaining_half[i]), ")")
cur_seg <- cur_seg + 1L
last_index <- i + 1L
}
if (last_index <= nrow(game_data)) {
seg_id[last_index:nrow(game_data)] <- cur_seg
}
game_data$segment_id <- seg_id
} else if (segment_by == "half") {
game_data$segment_id <- game_data$half
for (h in unique(game_data$segment_id)) {
rows <- which(game_data$segment_id == h)
last <- tail(rows, 1)
game_data$game_break[last] <- TRUE
game_data$game_break_label[last] <- paste0(game_data$description[last], " (", format_mmss(game_data$time_remaining_half[last]), ")")
}
} else if (segment_by == "num_breaks" && !is.null(num_breaks)) {
total_time <- max(game_data$secs_remaining_absolute, na.rm = TRUE)
cuts <- seq(total_time, 0, length.out = num_breaks + 1)
game_data$segment_id <- cut(game_data$secs_remaining_absolute,
breaks = cuts,
include.lowest = TRUE,
labels = FALSE)
for (s in unique(game_data$segment_id)) {
rows <- which(game_data$segment_id == s)
last <- tail(rows, 1)
game_data$game_break[last] <- TRUE
game_data$game_break_label[last] <- paste0(game_data$description[last], " (", format_mmss(game_data$time_remaining_half[last]), ")")
}
} else {
stop("Invalid segment_by type or missing num_breaks for 'num_breaks'.")
}
return(game_data)
}
document()
load_all()
nevada_game <- select_single_game(usu_data, "Utah State", "Nevada")
nevada_breaks <- assign_game_breaks(nevada_game, "timeout")
View(nevada_breaks)
document()
load_all()
lintr:::addin_lint_package()
library(devtools)
load_all()
check()
document()
check()
document()
check()
build_readme()
document()
check()
library(devtools)
load_all()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs10.02.1/bin/gswin64c.exe")
normalizePath("~/.Rprofile", winslash = "/")
file.edit("~/.Rprofile")
library(devtools)
lintr:::addin_lint_package()
library(devtools)
load_all()
lintr:::addin_lint_package()
load_all()
lintr:::addin_lint_package()
document()
load_all()
plot_game_trends(usu_data, "Utah State", "San Diego State", "timeout", "points")
View(dict$team)
View(dict)
document()
load_all()
plot_game_trends(usu_data, "Utah State", "San Diego State", "timeout", "points")
View(usu_data)
# update the dict file with shortnames (abbreviated State to St)
dict <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
usethis::use_data(dict, overwrite = TRUE)
document()
document()
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
View(dict)
colnames(dict)
library(devtools)
load_all()
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
colnames(dict)
# update the dict file with shortnames (abbreviated State to St)
dict <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
usethis::use_data(dict, overwrite = TRUE)
# update the dict file with shortnames (abbreviated State to St)
dict <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
"short_name" %in% colnames(dict)  # should return TRUE
usethis::use_data(dict, overwrite = TRUE)
colnames(dict)
library(bbinsightsR)
colnames(dict)
load_all()
library(devtools)
load_all()
colnames(dict)
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
# update the dict file with shortnames (abbreviated State to St)
dict <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
usethis::use_data(dict, overwrite = TRUE)
document()
library(devtools)
load_all()
document()
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
load("C:/Users/wilso/github/packages/bbinsightsr/data/dict.rda")
# update the dict file with shortnames (abbreviated State to St)
dict <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
View(dict)
new_dict <- dict  # copy dict to new object name
getwd()
save(new_dict, file = "new_dict.rda")  # save to working directory
document()
library(devtools)
load_all()
document()
document()
document()
document()
dictionary <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
usethis::use_data(dictionary, overwrite = TRUE)
document()
document()
document()
library(devtools)
load_all()
document()
plot_game_trends(usu_data, "Utah State", "Boise State", "timeouts", "points")
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
document()
load_all()
plot_game_trends(usu_data, "Utah State", "Boise State", "timeout", "points")
lintr:::addin_lint_package()
document()
load_all()
lintr:::addin_lint_package()
document()
load_all()
lintr:::addin_lint_package()
document()
load_all()
lintr:::addin_lint_package()
library(devtools)
library(bbinsightsR)
load_all()
lintr:::addin_lint_package()
document()
load_all()
# Load and clean play-by-play data
usu_data <- read_csv("data-raw/usu_data.csv") %>%
select(-`...1`)
library(dplyr)
library(readr)
# Load and clean play-by-play data
usu_data <- read_csv("data-raw/usu_data.csv") %>%
select(-`...1`)
usethis::use_data(usu_data, overwrite = TRUE)
# Create a cleaned dictionary with short_name column
dictionary <- dict %>%
mutate(short_name = gsub(" State$", " St", ESPN))
usethis::use_data(dictionary, overwrite = TRUE)
document()
load_all()
data("dictionary")
utils::globalVariables("dictionary")
document()
load_all()
check()
document()
load_all()
check()
library(devtools)
load
load_all()
document()
load_all()
document()
load_all()
check()
document()
load_all()
check()
library(devtools)
load_all()
lintr:::addin_lint_package()
document()
document()
document()
document()
document()
document()
load_all()
plot_game_trends(
games      = usu_data,
home_team  = "Utah State",
away_team  = "Wyoming",
game_break = "timeout",
stat       = "points",
game_date  = "2023-01-10"
)
plot_game_trends(
games      = usu_data,
home_team  = "Utah State",
away_team  = "Wyoming",
game_break = "timeout",
stat       = "points",
game_date  = "2023-01-10"
)
plot_game_trends(
games      = usu_data,
home_team  = "Utah State",
away_team  = "Wyoming",
game_break = "timeout",
stat       = "points",
game_date  = "2023-01-10"
)
document()
load_all()
build_vignettes()
install()
check()
documents()
document()
load_all()
vignette()
vignette("bbinsightsr")
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
document()
lintr:::addin_lint_package()
buildVignettes()
library(devtools)
build_vignettes()
build_vignettes()
lintr:::addin_lint_package()
document()
vignette()
vignette("bbinsightsr")
load_all()
document()
